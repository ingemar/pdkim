#! /usr/bin/env ruby
require 'pdkim'

RSA_PRIVKEY = <<EOT
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQC5+utIbbfbpssvW0TboF73Seos+1ijdPFGwc/z8Yu12cpjBvRb
5/qRJd83XCySRs0QkK1zWx4soPffbtyJ9TU5mO76M23lIuI5slJ4QLA0UznGxfHd
fXpK9qRnmG6A4HRHC9B93pjTo6iBksRhIeSsTL94EbUJ625i0Lqg4i6NVQIDAQAB
AoGBAIDGqJH/Pta9+GTzGovE0N0D9j1tUKPl/ocS/m4Ya7fgdQ36q8rTpyFICvan
QUmL8sQsmZ2Nkygt0VSJy/VOr6niQmoi97PY0egxvvK5mtc/nxePCGwYLOMpB6ql
0UptotmvJU3tjyHZbksOf6LlzvpAgk7GnxLF1Cg/RJhH9ubBAkEA6b32mr52u3Uz
BjbVWez1XBcxgwHk8A4NF9yCpHtVRY3751FZbrhy7oa+ZvYokxS4dzrepZlB1dqX
IXaq7CgakQJBAMuwpG4N5x1/PfLODD7PYaJ5GSIx6BZoJObnx/42PrIm2gQdfs6W
1aClscqMyj5vSBF+cWWqu1i7j6+qugSswIUCQA3T3BPZcqKyUztp4QM53mX9RUOP
yCBfZGzl8aCTXz8HIEDV8il3pezwcbEbnNjen+8Fv4giYd+p18j2ATSJRtECQGaE
lG3Tz4PYG/zN2fnu9KwKmSzNw4srhY82D0GSWcHerhIuKjmeTw0Y+EAC1nPQHIy5
gCd0Y/DIDgyTOCbML+UCQQClbgAoYnIpbTUklWH00Z1xr+Y95BOjb4lyjyIF98B2
FA0nM8cHuN/VLKjjcrJUK47lZEOsjLv+qTl0i0Lp6giq
-----END RSA PRIVATE KEY-----
EOT

DOMAIN = "duncanthrax.net"
SELECTOR = "cheezburger"

TEST_MESSAGE = [
  "From: Tom Kistner <tom@duncanthrax.net>\r\n",
  "X-Folded-Header: line one\r\n",
  "\tline two\r\n",
  "To: PDKIM User\r\n",
  "Subject: PDKIM Test\r\n",
  "\r\n",
  "Test 1, 2, 3, 4\r\n",
  "This is a simple test of Ruby PDKIM.\r\n"
]

# A DKIM public key record, as it usually resides in a DNS TXT record
DNS_TEST_RECORD = [
  "v=DKIM1; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB",
  "gQC5+utIbbfbpssvW0TboF73Seos+1ijdPFGwc/z8Yu12cp",
  "jBvRb5/qRJd83XCySRs0QkK1zWx4soPffbtyJ9TU5mO76M2",
  "3lIuI5slJ4QLA0UznGxfHdfXpK9qRnmG6A4HRHC9B93pjTo",
  "6iBksRhIeSsTL94EbUJ625i0Lqg4i6NVQIDAQAB;"
]

class PdkimTest

  include PDKIM

  def test1
    ctx = pdkim_init_sign(PDKIM_INPUT_NORMAL, DOMAIN, SELECTOR, RSA_PRIVKEY)
    ok = pdkim_set_debug_stream(ctx, 2) # 2 --> STDERR
    ok = pdkim_set_optional(ctx, nil, nil, PDKIM_CANON_SIMPLE, PDKIM_CANON_SIMPLE, -1, PDKIM_ALGO_RSA_SHA256, 0, 0)
    TEST_MESSAGE.each do |line| 
      ok = pdkim_feed(ctx, line, line.length+2)
    end
    pdkim_signatures = pdkim_feed_finish(ctx)
    
    #there's only ever 1 signature after sign
    email = pdkim_signatures[0][:signature] + CRLF + TEST_MESSAGE.join("")

    # the block on this call is mandatory, and handles the DNS lookup
    # to get the domain's public key
    ctx = pdkim_init_verify(PDKIM_INPUT_NORMAL) do |name|
      DNS_TEST_RECORD.join("") # return 'answer'
    end

    ok = pdkim_feed(ctx, email, email.length)
    pdkim_signatures = pdkim_feed_finish(ctx)
    puts pdkim_signatures.inspect
    pdkim_free_ctx(ctx)
  end

  def test2
    puts "------------------------------------------------------------"
    puts "---- The raw test email.                                   -"
    puts "------------------------------------------------------------"
    puts TEST_MESSAGE.join("")
    email = pdkim_sign_an_email(PDKIM_INPUT_NORMAL, DOMAIN, SELECTOR, RSA_PRIVKEY, PDKIM_CANON_SIMPLE, PDKIM_CANON_SIMPLE, TEST_MESSAGE)
    puts
    puts "------------------------------------------------------------"
    puts "---- The test email after signing.                         -"
    puts "------------------------------------------------------------"
    puts email
    puts
    verify_counts = pdkim_verify_an_email(PDKIM_INPUT_NORMAL, email, :fake_domain_lookup)
#    verify_counts = pdkim_verify_an_email(PDKIM_INPUT_NORMAL, email)
    puts "------------------------------------------------------------"
    puts "---- The verification counts of the DKIM headers:          -"
    puts "---- The count of PDKIM_VERIFY_NONE:       %d               -"%verify_counts[0]
    puts "---- The count of PDKIM_VERIFY_INVALID:    %d               -"%verify_counts[1]
    puts "---- The count of PDKIM_VERIFY_FAIL:       %d               -"%verify_counts[2]
    puts "---- The count of PDKIM_VERIFY_PASS:       %d               -"%verify_counts[3]
    puts "------------------------------------------------------------"
    puts
  end
  
  def fake_domain_lookup(name)
    DNS_TEST_RECORD.join("")
  end
  
end

PdkimTest.new.test2
