#! /usr/bin/env ruby
require 'pdkim'
require 'yaml'

RSA_PRIVATE_KEY = <<EOT
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQC5+utIbbfbpssvW0TboF73Seos+1ijdPFGwc/z8Yu12cpjBvRb
5/qRJd83XCySRs0QkK1zWx4soPffbtyJ9TU5mO76M23lIuI5slJ4QLA0UznGxfHd
fXpK9qRnmG6A4HRHC9B93pjTo6iBksRhIeSsTL94EbUJ625i0Lqg4i6NVQIDAQAB
AoGBAIDGqJH/Pta9+GTzGovE0N0D9j1tUKPl/ocS/m4Ya7fgdQ36q8rTpyFICvan
QUmL8sQsmZ2Nkygt0VSJy/VOr6niQmoi97PY0egxvvK5mtc/nxePCGwYLOMpB6ql
0UptotmvJU3tjyHZbksOf6LlzvpAgk7GnxLF1Cg/RJhH9ubBAkEA6b32mr52u3Uz
BjbVWez1XBcxgwHk8A4NF9yCpHtVRY3751FZbrhy7oa+ZvYokxS4dzrepZlB1dqX
IXaq7CgakQJBAMuwpG4N5x1/PfLODD7PYaJ5GSIx6BZoJObnx/42PrIm2gQdfs6W
1aClscqMyj5vSBF+cWWqu1i7j6+qugSswIUCQA3T3BPZcqKyUztp4QM53mX9RUOP
yCBfZGzl8aCTXz8HIEDV8il3pezwcbEbnNjen+8Fv4giYd+p18j2ATSJRtECQGaE
lG3Tz4PYG/zN2fnu9KwKmSzNw4srhY82D0GSWcHerhIuKjmeTw0Y+EAC1nPQHIy5
gCd0Y/DIDgyTOCbML+UCQQClbgAoYnIpbTUklWH00Z1xr+Y95BOjb4lyjyIF98B2
FA0nM8cHuN/VLKjjcrJUK47lZEOsjLv+qTl0i0Lp6giq
-----END RSA PRIVATE KEY-----
EOT

RSA_PUBLIC_KEY_DKIM = "v=DKIM1; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5+utIbbfbpssvW0TboF73Seos+1ijdPFGwc/z8Yu12cpjBvRb5/qRJd83XCySRs0QkK1zWx4soPffbtyJ9TU5mO76M23lIuI5slJ4QLA0UznGxfHdfXpK9qRnmG6A4HRHC9B93pjTo6iBksRhIeSsTL94EbUJ625i0Lqg4i6NVQIDAQAB;"

DOMAIN = "duncanthrax.net"
SELECTOR = "cheezburger"

PDKIM_RETURN_CODES = ["PDKIM_VERIFY_NONE", "PDKIM_VERIFY_INVALID", "PDKIM_VERIFY_FAIL", "PDKIM_VERIFY_PASS"]

TEST_MESSAGE = [
  "From: Tom Kistner <tom@duncanthrax.net>",
  "X-Folded-Header: line one",
  "\tline two",
  "To: PDKIM User",
  "Subject: PDKIM Test",
  "",
  "Test 1, 2, 3, 4",
  "This is a simple test of Ruby PDKIM."
]

# the dkim header expected from this message is:
#DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=simple/simple; d=duncanthrax.net; s=cheezburger;
#	h=Subject:To:From; bh=+oeSNE7b9Ka6Gdh9ItFGX3J6Wacjc/JxAUaId7ON0T0=;
#	b=Ap6DcX3x2MEoj1E3KBow7NF/2g5CnUoqkt0hgqJ0DufuOsFAPLl0tYA+yYIoCp8Acn/BJkjVYY+WQ7mlSUJfrZEZYIq1P+BZgBdP+Z+g3vrK2zEJchvwpnP0+xKniIktxT2WRQOoH3HBb/5Z1AhtuNfPEoE+kZN22Gksto4bqdg=;

class PdkimTest

  include PDKIM

  def main
    puts
    puts
    test1
    puts
    puts
    test2
    puts
    puts
    test3
    puts
  end

  def display(name, unsigned_message, signed_message, signatures)
    puts name.upcase
    if !unsigned_message.nil?
      puts "------------------------------------------------------------"
      puts "---- The test email before signing.                        -"
      puts "------------------------------------------------------------"
      puts unsigned_message.join(CRLF)+CRLF
    end
    puts
    puts "------------------------------------------------------------"
    puts "---- The test email after signing.                         -"
    puts "------------------------------------------------------------"
    puts signed_message.join(CRLF)+CRLF
    puts
    case
    when signatures.size==0
      puts "------------------------------------------------------------"
      puts "---- The no DKIM headers were found:                       -"
      puts "------------------------------------------------------------"
    when signatures.size==1
      puts "------------------------------------------------------------"
      puts "---- The signature of the DKIM header:                     -"
      puts "------------------------------------------------------------"
      signatures.each { |signature| puts "- %-36s%-20s -"%[signature[:domain], PDKIM_RETURN_CODES[signature[:verify_status]]] }
      puts "------------------------------------------------------------"
    else
      puts "------------------------------------------------------------"
      puts "---- The signatures of the DKIM headers:                   -"
      puts "------------------------------------------------------------"
      signatures.each { |signature| puts "%-38s%-20s -"%[signature[:domain], PDKIM_RETURN_CODES[signature[:verify_status]]] }
      puts "------------------------------------------------------------"
    end
  end

  def test1
    # ---------- SIGN ----------
    ctx = pdkim_init_sign(PDKIM_INPUT_NORMAL, DOMAIN, SELECTOR, RSA_PRIVATE_KEY)
#    ok = pdkim_set_debug_stream(ctx, 2) # 2 --> STDERR
    ok = pdkim_set_optional(ctx, nil, nil, PDKIM_CANON_SIMPLE, PDKIM_CANON_SIMPLE, -1, PDKIM_ALGO_RSA_SHA256, 0, 0)
    TEST_MESSAGE.each do |line| 
      ok = pdkim_feed(ctx, line+CRLF, line.length+2)
    end
    signatures = pdkim_feed_finish(ctx)
    signed_message = [signatures[0][:signature]]
    signed_message.concat(TEST_MESSAGE)
    pdkim_free_ctx(ctx)

    # --------- VERIFY ---------
    # the block on this call is mandatory, and handles the DNS lookup
    # to get the domain's public key
    ctx = pdkim_init_verify(PDKIM_INPUT_NORMAL) do |name|
      RSA_PUBLIC_KEY_DKIM
    end
    signed_message.each do |line|
      ok = pdkim_feed(ctx, line+CRLF, line.length+2)
    end
    signatures = pdkim_feed_finish(ctx)
    pdkim_free_ctx(ctx)
    display("TEST1 -- SIGNING/VERIFYING THE LONG WAY", TEST_MESSAGE, signed_message, signatures)
  end

  def test2
    ok, signed_message = pdkim_sign_an_email(PDKIM_INPUT_NORMAL, DOMAIN, SELECTOR, RSA_PRIVATE_KEY, PDKIM_CANON_SIMPLE, PDKIM_CANON_SIMPLE, TEST_MESSAGE)
    ok, signatures = pdkim_verify_an_email(PDKIM_INPUT_NORMAL, signed_message, :fake_domain_lookup)
    display("TEST2 -- SIGNING/VERIFYING THE SHORT WAY", TEST_MESSAGE, signed_message, signatures)
  end
  
  def fake_domain_lookup(name)
    RSA_PUBLIC_KEY_DKIM
  end

  # If Google ever removes the selector in this test email, this will cease to function
  def test3
    mail = YAML::load_file("bin/1ZsMk0-0iglmo-E9")
    gmail = mail[:data][:text]
    ok, signatures = pdkim_verify_an_email(PDKIM_INPUT_NORMAL, gmail)
    display("TEST3 -- VERIFYING A GMAIL SIGNATURE", nil, gmail, signatures)
  end

end

PdkimTest.new.main



